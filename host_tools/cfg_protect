#!/usr/bin/python3 -u

# 2022 eCTF
# Protect Configuration Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import logging
import json
import os
from pathlib import Path
from cryptography.hazmat.primitives.ciphers import algorithms, modes, Cipher
from cryptography.hazmat.backends import default_backend
from util import print_banner, CONFIGURATION_ROOT, LOG_FORMAT, sign, generate_integrity_challenge

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def protect_configuration(raw_cfg: Path, protected_cfg: Path):
    print_banner("SAFFIRe Configuration Protect Tool")

    # Read in the raw configuration binary
    log.info("Reading configuration data...")
    file_data = raw_cfg.read_bytes()

    log.info("Signing...")
    if len(file_data) % 32 != 0:
        padding = 32 - len(file_data) % 32
        file_data+=b"\x00"*padding
    signature = sign(file_data)
    log.info(f"Signature: {signature.hex()}")

    log.info("Setting up Encryption...")

    log.info("Encrypting the config file...")
    key_file = Path("/secrets/encryption_key.bin")
    key = key_file.read_bytes()[:32]
    iv = os.urandom(16)
    cipher = Cipher(algorithms.AES(key), modes.CBC(iv), default_backend())
    encryptor = cipher.encryptor()
    enc_cfg = encryptor.update(file_data) + encryptor.finalize()

    # enc_cfg = enc.encrypt(file_data)
    #enc_cfg = file_data
    assert len(enc_cfg) == len(file_data), "Encrypted config is larger"
    
    log.info("Packaging the configuration...")
    data = {
        "signature": signature.hex(),
        "iv": iv.hex(),
        "configuration": enc_cfg.hex(),
        "challenge": generate_integrity_challenge()
    }

    # Write to the output file
    with protected_cfg.open("w", encoding="utf8") as fd:
        json.dump(data, fd)
    #protected_cfg.write_bytes(signature + file_data)

    log.info("Configuration protected\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--input-file", help="The name of the configuration to protect.", required=True
    )
    parser.add_argument(
        "--output-file", help="The name of the protected configuration.", required=True
    )

    args = parser.parse_args()

    # process command
    raw_cfg = CONFIGURATION_ROOT / args.input_file
    protected_cfg = CONFIGURATION_ROOT / args.output_file
    protect_configuration(raw_cfg, protected_cfg)


if __name__ == "__main__":
    main()
