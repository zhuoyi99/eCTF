#!/usr/bin/python3 -u

# 2022 eCTF
# Configure Tool
# Kyle Scaplen
#
# (c) 2022 The MITRE Corporation
#
# This source file is part of an example system for MITRE's 2022 Embedded System
# CTF (eCTF). This code is being provided only for educational purposes for the
# 2022 MITRE eCTF competition, and may not meet MITRE standards for quality.
# Use this code at your own risk!

import argparse
import logging
from pathlib import Path
import json
import socket
import struct

from util import print_banner, send_packets, RESP_OK, CONFIGURATION_ROOT, LOG_FORMAT, integrity_challenge

logging.basicConfig(level=logging.INFO, format=LOG_FORMAT)
log = logging.getLogger(Path(__file__).name)


def load_configuration(socket_number: int, config_file: Path):
    print_banner("SAFFIRe Configuration Tool")

    log.info("Reading configuration file...")
    with config_file.open("rb") as cfg:
        data = json.load(cfg)
        signature = bytes.fromhex(data["signature"])
        config_iv = bytes.fromhex(data["iv"])
        configuration = bytes.fromhex(data["configuration"])
        size = len(configuration)
        challenge = data["challenge"]

    # Connect to the bootloader
    log.info("Connecting socket...")
    with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as sock:
        sock.connect(("saffire-net", socket_number))

        integrity_challenge(sock, data["challenge"])

        # Send configure command
        log.info("Sending configure command...")
        sock.sendall(b"C")

        # Receive bootloader acknowledgement
        while sock.recv(1) != b"C":
            pass

        # Send the size
        log.info("Sending the size...")
        payload = struct.pack(">I", size)
        sock.send(payload)
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")

        log.info("Sending signature and data...")
        # Send signature
        sock.sendall(signature)
        
        # Send Configuration IV
        sock.sendall(config_iv)

        # Waiting for confirmation again to prevent buffering problems :(
        response = sock.recv(1)
        if response != RESP_OK:
            exit(f"ERROR: Bootloader responded with {repr(response)}")
        
        # Send packets
        log.info("Sending configuration packets...")
        send_packets(sock, configuration)

        log.info("Waiting for final OK...");
        response = sock.recv(1)
        if response != b"O":
            if response == b"P":
                log.error("Bootloader went into panic mode due to integrity violation!")
            elif response == b"C":
                log.error("Bootloader failed to verify signature of configuration!")
            exit(-1)

        log.info("Firmware configured\n")


def main():
    # get arguments
    parser = argparse.ArgumentParser()

    parser.add_argument(
        "--socket",
        help="Port number of the socket to connect the host to the bootloader.",
        type=int,
        required=True,
    )
    parser.add_argument(
        "--config-file",
        help="Name of the protected configuration to load.",
        required=True,
    )

    args = parser.parse_args()

    config_file = CONFIGURATION_ROOT / args.config_file

    load_configuration(args.socket, config_file)


if __name__ == "__main__":
    main()
