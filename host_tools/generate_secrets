#!/usr/bin/python3 -u

import ed25519
import base64
from cryptography.fernet import Fernet

signing_key, verifying_key = ed25519.create_keypair()
#aes_key = Fernet.generate_key()
# DUMMY KEY  **REMOVE**
aes_key = b'l_HnGnv5aZS1aCBZlPi4V5LjxWLjeh6uQaBRvia-Ecg='

print(f"Signature Public Key: {verifying_key.to_bytes().hex()}")

EEPROM_BLOCK_SIZE = 1<<6

with open("/secrets/ed_public_key.bin", "wb") as f:
    # f.write(b"\xdd" * EEPROM_BLOCK_SIZE)
    # Write the public key to EEPROM with padding to block size
    f.write(verifying_key.to_bytes() + b"\xdd" * 32)
with open("/secrets/ed_private_key.bin", "wb") as f:
    f.write(signing_key.to_bytes())

# Encryption key to be copied onto the bootloader
with open("/secrets/aes_key_bootloader.bin", "wb") as f:
    # In the bootloader side, decode the key in the bytes format
    aes_to_bytes = base64.urlsafe_b64decode(aes_key)
    aes_to_bytes+=b"\xdd"*32
    f.write(aes_to_bytes)

# Encryption key to be used onto the host side
with open("/secrets/aes_key_host.bin", "wb") as f:
    f.write(aes_key)
