#!/usr/bin/python3 -u

import ed25519
import os

signing_key, verifying_key = ed25519.create_keypair()

print(f"Signature Public Key: {verifying_key.to_bytes().hex()}")

EEPROM_BLOCK_SIZE = 1<<6

with open("/secrets/ed_public_key.bin", "wb") as f:
    # f.write(b"\xdd" * EEPROM_BLOCK_SIZE)
    # Write the public key to EEPROM with padding to block size
    f.write(verifying_key.to_bytes() + b"\xdd" * 32)
    assert f.tell() == 64
with open("/secrets/ed_private_key.bin", "wb") as f:
    f.write(signing_key.to_bytes())

with open("/secrets/default_ver_signature.bin", "wb") as f:
    # Signature of the default version no. and IV
    f.write(signing_key.sign(b"\xff" * 20)) # Already 1 block
    assert f.tell() == 64

with open("/secrets/encryption_key.bin", "wb") as f:
    f.write(os.urandom(32)+b"\xFF"*32)
    assert f.tell() == 64

with open("/secrets/auth_key.bin", "wb") as f:
    # symmetric key is first 32 bytes
    # I'm appending 32 more random bytes in the docker file, so there will be 64 bytes in this block eventually
    f.write(os.urandom(32)) 
